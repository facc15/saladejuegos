{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Facundo/Desktop/Angular/TP/saladejuegos/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { first } from 'rxjs/operators'; //firestore\n\nimport { collection, addDoc } from \"firebase/firestore\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/firestore\";\nimport * as i2 from \"@angular/fire/compat/auth\";\nimport * as i3 from \"ngx-toastr\";\nexport class AuthService {\n  constructor(afs, afAuth, toastr) {\n    this.afs = afs;\n    this.afAuth = afAuth;\n    this.toastr = toastr;\n    this.miUser = {};\n    this.afAuth.authState.subscribe(u => {\n      console.log(\"estado:\", u);\n\n      if (!u) {\n        return;\n      }\n\n      this.miUser.name = u?.displayName;\n      this.miUser.id = u?.uid;\n      this.miUser.email = u?.email;\n    });\n  }\n\n  estadoLog() {}\n\n  guardarColeccion(correo, pass) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const docRef = yield addDoc(collection(_this.afs.firestore, \"Usuarios\"), {\n          correo: correo,\n          pass: pass,\n          fecha: new Date()\n        });\n        console.log(\"Documento escrito en colección: \", docRef.id);\n      } catch (e) {\n        console.error(\"Error al agregar document: \", e);\n      }\n    })();\n  }\n\n  loguear(email, password) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const resultado = yield _this2.afAuth.signInWithEmailAndPassword(email, password).then(user => {\n        _this2.toastr.success('El usuario se logueó satistactoriamente', 'Exito', {\n          timeOut: 2000,\n          progressAnimation: 'increasing',\n          positionClass: 'toast-top-center'\n        });\n\n        console.log(user);\n      }).catch(error => {\n        console.log(error);\n\n        _this2.toastr.error(_this2.firebaseError(error.code), 'Error', {\n          timeOut: 2000,\n          progressAnimation: 'decreasing',\n          positionClass: 'toast-bottom-center'\n        });\n      });\n      return resultado;\n    })();\n  }\n\n  getIdToken() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      return yield _this3.afAuth.idTokenResult;\n    })();\n  }\n\n  registrar(email, password) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const resultado = yield _this4.afAuth.createUserWithEmailAndPassword(email, password).then( /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (user) {\n            console.log(\"user: \" + user);\n            const coleccion = yield _this4.guardarColeccion(email, password);\n          });\n\n          return function (_x) {\n            return _ref.apply(this, arguments);\n          };\n        }()).catch(error => {\n          console.log(error);\n\n          _this4.toastr.error(_this4.firebaseError(error.code), 'Error', {\n            timeOut: 2000,\n            progressAnimation: 'decreasing',\n            positionClass: 'toast-bottom-center'\n          });\n        });\n        return resultado;\n      } catch (error) {\n        return \"error\";\n      }\n\n      return \"\";\n    })();\n  }\n\n  firebaseError(code) {\n    switch (code) {\n      case 'auth/email-already-in-use':\n        return 'El usuario ya se encuentra registrado';\n\n      case 'auth/weak-password':\n        return 'La contraseña debe ser mínimo de 6 caracteres';\n\n      case 'auth/invalid-email':\n        return 'El correo es inválido';\n\n      case 'auth/wrong-password':\n        return 'La contraseña es incorrecta';\n\n      case 'auth/user-not-found':\n        return 'El usuario no se encuentra registado';\n\n      default:\n        return 'Error desconocido';\n    }\n  }\n\n  desloguear() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        _this5.miUser = {};\n        yield _this5.afAuth.signOut();\n      } catch (error) {\n        console.log(error);\n      }\n    })();\n  }\n  /*\r\n  async loginWithGoogle()\r\n  {\r\n    try {\r\n      let provider=new firebase.default.auth.GoogleAuthProvider()\r\n          const result= this.afAuth.signInWithPopup(provider);\r\n      return result;\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n    return;\r\n  }*/\n\n\n  getUserLog() {\n    return this.afAuth.authState.pipe(first()).toPromise();\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.AngularFirestore), i0.ɵɵinject(i2.AngularFireAuth), i0.ɵɵinject(i3.ToastrService));\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["first","collection","addDoc","AuthService","constructor","afs","afAuth","toastr","authState","subscribe","u","console","log","miUser","name","displayName","id","uid","email","estadoLog","guardarColeccion","correo","pass","docRef","firestore","fecha","Date","e","error","loguear","password","resultado","signInWithEmailAndPassword","then","user","success","timeOut","progressAnimation","positionClass","catch","firebaseError","code","getIdToken","idTokenResult","registrar","createUserWithEmailAndPassword","coleccion","desloguear","signOut","getUserLog","pipe","toPromise","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Facundo\\Desktop\\Angular\\TP\\saladejuegos\\src\\app\\servicios\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/compat/auth';\nimport { AngularFirestore} from '@angular/fire/compat/firestore';\nimport * as firebase from 'firebase/app';\nimport { getAuth, getIdToken, onAuthStateChanged, User } from \"firebase/auth\";\nimport { first } from 'rxjs/operators';\n//firestore\nimport { collection, addDoc } from \"firebase/firestore\";\nimport { getFirestore } from \"firebase/firestore\";\nimport { initializeApp } from \"firebase/app\";\nimport { ToastrService } from 'ngx-toastr';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n\n  public miUser :any={};\n  public token !: string;\n\n  constructor(private afs:AngularFirestore, public afAuth: AngularFireAuth, private toastr: ToastrService) {\n\n    this.afAuth.authState.subscribe(u=>{\n      console.log(\"estado:\" ,u);\n\n\n\n      if(!u)\n      {\n        return;\n      }\n\n      this.miUser.name=u?.displayName;\n      this.miUser.id=u?.uid;\n      this.miUser.email= u?.email;\n\n\n    })\n  }\n\n  estadoLog()\n  {\n\n  }\n\n  async guardarColeccion(correo: string, pass: string)\n  {\n    try {\n      const docRef = await addDoc(collection(this.afs.firestore,\"Usuarios\"), {\n        correo: correo,\n        pass: pass,\n        fecha: new Date(),\n      });\n      console.log(\"Documento escrito en colección: \", docRef.id);\n\n    } catch (e) {\n      console.error(\"Error al agregar document: \", e);\n\n    }\n  }\n\n\n\n  async loguear(email:string, password:string){\n\n    const resultado= await this.afAuth.signInWithEmailAndPassword(email,password).then((user)=>{\n\n      this.toastr.success('El usuario se logueó satistactoriamente', 'Exito',{\n        timeOut: 2000,\n        progressAnimation: 'increasing',\n        positionClass: 'toast-top-center'\n        });\n      console.log(user);\n    }).catch((error)=>{console.log(error)\n      this.toastr.error(this.firebaseError(error.code),'Error',{\n        timeOut: 2000,\n        progressAnimation: 'decreasing',\n        positionClass: 'toast-bottom-center'\n      });});\n\n    return resultado;\n\n}\n\nasync getIdToken()\n{\nreturn await this.afAuth.idTokenResult;\n}\n\n\n\n\n  async registrar(email:string, password:string){\n\n    try{\n\n      const resultado= await this.afAuth.createUserWithEmailAndPassword(email,password).then(async (user)=>{\n        console.log(\"user: \"+user);\n        const coleccion=await this.guardarColeccion(email,password);\n      }).catch((error)=>{console.log(error)\n      this.toastr.error(this.firebaseError(error.code),'Error',{\n        timeOut: 2000,\n        progressAnimation: 'decreasing',\n        positionClass: 'toast-bottom-center'\n      });\n\n      });\n\n    return resultado;\n\n    }catch(error){\n      return \"error\";\n    }\n    return \"\";\n  }\n\n\n  firebaseError(code: string)\n  {\n    switch(code)\n    {\n        case 'auth/email-already-in-use':\n          return 'El usuario ya se encuentra registrado';\n        case 'auth/weak-password':\n          return 'La contraseña debe ser mínimo de 6 caracteres';\n        case 'auth/invalid-email':\n          return 'El correo es inválido';\n        case 'auth/wrong-password':\n        return 'La contraseña es incorrecta';\n        case 'auth/user-not-found':\n          return 'El usuario no se encuentra registado';\n        default:\n          return 'Error desconocido';\n\n    }\n\n  }\n\n\n  async desloguear(){\n    try{\n      this.miUser={};\n      await this.afAuth.signOut();\n    }catch(error){\n          console.log(error);\n          }\n\n  }\n\n  /*\n  async loginWithGoogle()\n  {\n    try {\n      let provider=new firebase.default.auth.GoogleAuthProvider()\n\n      const result= this.afAuth.signInWithPopup(provider);\n      return result;\n    } catch (error) {\n      console.log(error);\n    }\n    return;\n  }*/\n\n  getUserLog(){\n    return this.afAuth.authState.pipe(first()).toPromise();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}