{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Facundo/Desktop/Angular/TP/saladejuegos/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { GoogleAuthProvider } from \"firebase/auth\";\nimport { first } from 'rxjs/operators'; //firestore\n\nimport { collection, addDoc, query, where, getDocs } from \"firebase/firestore\";\nimport { collectionData } from '@angular/fire/firestore';\nimport { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/fire/compat/firestore\";\nimport * as i3 from \"@angular/fire/compat/auth\";\nimport * as i4 from \"ngx-toastr\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(router, afs, afAuth, toastr) {\n      this.router = router;\n      this.afs = afs;\n      this.afAuth = afAuth;\n      this.toastr = toastr;\n      this.miUser = {};\n      this.afAuth.authState.subscribe(u => {\n        console.log(\"estado:\", u);\n\n        if (!u) {\n          return;\n        }\n\n        this.miUser.name = u?.displayName;\n        this.miUser.id = u?.uid;\n        this.miUser.email = u?.email;\n      });\n    }\n\n    loguearGoogle() {\n      this.afAuth.signInWithPopup(new GoogleAuthProvider()).then(algo => {\n        console.log(\"Se logueo bien con google\");\n        console.log(algo);\n        this.router.navigateByUrl('home');\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n\n    loguear(email, password) {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        const resultado = yield _this.afAuth.signInWithEmailAndPassword(email, password).then(user => {\n          _this.toastr.success('El usuario se logueó satistactoriamente', 'Exito', {\n            timeOut: 1500,\n            progressAnimation: 'increasing',\n            positionClass: 'toast-top-center'\n          });\n        }).catch(error => {\n          console.log(error);\n\n          _this.toastr.error(_this.firebaseError(error.code), 'Error', {\n            timeOut: 1500,\n            progressAnimation: 'decreasing',\n            positionClass: 'toast-bottom-center'\n          });\n        });\n        return resultado;\n      })();\n    }\n\n    registrar(usuario) {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          const resultado = yield _this2.afAuth.createUserWithEmailAndPassword(usuario.correo, usuario.pass).then( /*#__PURE__*/function () {\n            var _ref = _asyncToGenerator(function* (user) {\n              console.log(\"user: \" + user);\n              usuario.uid = user.user?.uid;\n              const coleccion = yield _this2.guardarColeccion(usuario);\n\n              _this2.toastr.success('El usuario se registró satistactoriamente', 'Exito', {\n                timeOut: 1000,\n                progressAnimation: 'increasing',\n                positionClass: 'toast-top-center'\n              });\n            });\n\n            return function (_x) {\n              return _ref.apply(this, arguments);\n            };\n          }()).catch(error => {\n            console.log(error);\n\n            _this2.toastr.error(_this2.firebaseError(error.code), 'Error', {\n              timeOut: 2000,\n              progressAnimation: 'decreasing',\n              positionClass: 'toast-bottom-center'\n            });\n          });\n          return resultado;\n        } catch (error) {\n          return \"error\";\n        }\n\n        return \"\";\n      })();\n    }\n\n    guardarColeccion(usuario) {\n      var _this3 = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          const docRef = yield addDoc(collection(_this3.afs.firestore, \"Usuarios\"), {\n            uid: usuario.uid,\n            correo: usuario.correo,\n            pass: usuario.pass,\n            fecha: new Date(),\n            perfil: usuario.perfil\n          });\n          console.log(\"Documento escrito en colección: \", docRef.id);\n        } catch (e) {\n          console.error(\"Error al agregar document: \", e);\n        }\n      })();\n    }\n\n    traerUsuarios() {\n      let placeRef = collection(this.afs.firestore, \"Usuarios\");\n      return collectionData(placeRef, {\n        idField: 'id'\n      });\n    }\n\n    traerUsuario(id) {\n      var _this4 = this;\n\n      return _asyncToGenerator(function* () {\n        const q = query(collection(_this4.afs.firestore, 'Usuarios'), where('uid', '==', id));\n        const querySnapshot = yield getDocs(q);\n        const docu = yield querySnapshot.forEach(doc => {\n          // doc.data() is never undefined for query doc snapshots\n          //console.log(doc.id, \" => \", doc.data());\n          _this4.doc = doc.data();\n        });\n        return _this4.doc;\n      })();\n    }\n\n    firebaseError(code) {\n      switch (code) {\n        case 'auth/email-already-in-use':\n          return 'El usuario ya se encuentra registrado';\n\n        case 'auth/weak-password':\n          return 'La contraseña debe ser mínimo de 6 caracteres';\n\n        case 'auth/invalid-email':\n          return 'El correo es inválido';\n\n        case 'auth/wrong-password':\n          return 'La contraseña es incorrecta';\n\n        case 'auth/user-not-found':\n          return 'El usuario no se encuentra registado';\n\n        default:\n          return 'Error desconocido';\n      }\n    }\n\n    desloguear() {\n      var _this5 = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          _this5.miUser = {};\n          yield _this5.afAuth.signOut();\n        } catch (error) {\n          console.log(error);\n        }\n      })();\n    }\n\n    getUserLog() {\n      return this.afAuth.authState.pipe(first()).toPromise();\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AngularFirestore), i0.ɵɵinject(i3.AngularFireAuth), i0.ɵɵinject(i4.ToastrService));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}